import numpy as np
import pyqtgraph as pg
from PySide6 import QtCore, QtGui
from PySide6.QtCore import Qt, Slot
from PySide6.QtGui import QBrush, QColor, QPainter, QPen
from PySide6.QtWidgets import QMainWindow
from views.ui_MainView import Ui_MainWindow


class MainView(QMainWindow):
    def __init__(self, model, main_controller):
        super().__init__()

        self._model = model
        self._main_controller = main_controller
        self._ui = Ui_MainWindow()
        self._ui.setupUi(self)

        self._init_custom_components()

        # connect widgets to controller
        self._ui.pushButton_change_image.clicked.connect(
            lambda: self._main_controller.change_image(file_path="2001015.jpg")
        )

        # Listen for model event signals
        self._model.image_changed.connect(self.image_value_changed)

        # set a default image
        self._main_controller.change_image()

        # rect_item = RectItem(QtCore.QRectF(100, 100, 100, 100))
        # plotWidget.addItem(rect_item)
        # rect_item.move(500, 500)
        # rect_item.changeColor()
        # rect_item.move(600, 100)

    # Starting slot name with "on_" triggers code that tries to automatically connect.
    # This doesn't work and gives a warning, but it is not needed as the connection is made
    # manually.
    # To avoid warnings, don't start the name with "on_", e.g "on_image_value_changed".
    @Slot(np.ndarray)
    def image_value_changed(self, value):
        self.plot_image(value)

    def _init_custom_components(self):
        # Custom components not generated by designer:
        self.plotWidget: pg.PlotWidget = self._ui.plotWidget
        self.plotWidget.getPlotItem().hideAxis("left")
        self.plotWidget.getPlotItem().hideAxis("bottom")
        self.plotWidget.hideButtons()
        self._imageItem: pg.ImageItem = None

    def plot_image(self, image):
        if self._imageItem:
            self._imageItem.clear()
        self._imageItem = pg.ImageItem(image)
        self.plotWidget.addItem(self._imageItem)


class RectItem(pg.GraphicsObject):
    def __init__(self, rect, parent=None):
        super().__init__(parent)
        self._rect = rect
        self.picture = QtGui.QPicture()

        self.background_rgb = [255, 0, 0]  # 0-255
        self.background_opacity = 20  # 0-255
        self.border_rgb = [255, 0, 0]  # 0-255
        self.border_opacity = 255  # 0-255

        self._generate_picture()

    @property
    def rect(self):
        return self._rect

    @property
    def brush(self):
        return QBrush(
            QColor(*self.background_rgb, self.background_opacity),
            Qt.BrushStyle.SolidPattern,
        )

    def _generate_picture(self):
        painter = QtGui.QPainter(self.picture)
        painter.setPen(pg.mkPen(QColor(*self.border_rgb, self.border_opacity), width=2))

        painter.setBrush(self.brush)
        painter.drawRect(self.rect)
        painter.end()

    def paint(self, painter, option, widget=None):
        painter.drawPicture(0, 0, self.picture)

    def boundingRect(self):
        return QtCore.QRectF(self.picture.boundingRect())

    def move(self, x, y):
        self.rect.moveCenter(QtCore.QPointF(x, y))
        self.prepareGeometryChange()
        self._generate_picture()
        self.update()

    def changeColor(self):
        self.background_rgb = [0, 255, 0]
        self.border_rgb = [0, 255, 0]
        self.update()
